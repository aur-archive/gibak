From: Lee Marlow <lee.marlow@gmail.com>
Date: Fri, 25 Jul 2008 16:40:28 +0000 (-0600)
Subject: Stop using deprecated git dashed commands (e.g. git-add)
X-Git-Url: http://eigenclass.org/repos/gitweb?p=gibak.git;a=commitdiff_plain;h=0081e234c152eea665b0dd9cbfc0f2f77f7d04a3;hp=820ef0549a72ad8f1a30a50ac4e66f8b4d0f9f6c

Stop using deprecated git dashed commands (e.g. git-add)

The dashed commands will be removed from PATH in git 1.6
Use 'git add' instead of 'git-add', etc.
---

diff --git a/gibak b/gibak
index e987468..a0e17a0 100755
--- a/gibak
+++ b/gibak
@@ -61,7 +61,7 @@ function __abort_on_not_initialized() {
 	exit 1
     fi
     # further tests
-    source git-sh-setup
+    source "$(git --exec-path)/git-sh-setup"
     require_work_tree
 }
 
@@ -87,15 +87,15 @@ function __handle_git_repositories() {
 	    "$rep" "$rep" "$base/$rep/.git" >> .gitmodules
     done
     touch .gitmodules
-    git-add -f .gitmodules
-    git-submodule init
+    git add -f .gitmodules
+    git submodule init
 }
 
 function init() {
     __abort_on_initialized
 
     # I know it's the default... but let's be explicit!
-    git-init --shared=umask
+    git init --shared=umask
     chmod -R u+rwX,go-rwx .git
 
     # Add a gitweb description
@@ -185,8 +185,8 @@ EOF
 
 EOF
 
-    git-add -f .gitignore
-    git-commit -q -a -m"Initialized by $SCRIPT_NAME"
+    git add -f .gitignore
+    git commit -q -a -m"Initialized by $SCRIPT_NAME"
     chmod u+x .git/hooks/pre-commit
     chmod u+x .git/hooks/post-checkout
     echo
@@ -216,27 +216,27 @@ function commit() {
     local modifier=
 
     echo "Committing to repository, this may take a long time" >&2
-    if git-ls-files --modified --others --exclude-standard | egrep -q '(^|/).gitignore$'; then
+    if git ls-files --modified --others --exclude-standard | egrep -q '(^|/).gitignore$'; then
 	echo "Some .gitignore added or modified, determining newly ignored files." >&2
 	# I don't like myself for using such a sloppy way of
 	# removing previously-tracked newly-ignored files...
 	# :(  help me! ahhhhrrrggg
 	# seems like the only way to stop tracking newly-ignored files
-	#git-rm --cached -r -f . >/dev/null
+	#git rm --cached -r -f . >/dev/null
 
 	# better way, using ometastore
         ometastore -d -i -z | \
 	xargs -0 git rm --cached -r -f --ignore-unmatch -- 2>/dev/null
     fi
     echo "Adding new and modified files." >&2
-    git-add -v . \
+    git add -v . \
 	|| die "Could not complete addition of files to history store!"
     __handle_git_repositories
     test -n "$what" || modifier="-a"
     echo "Committing." >&2
-    git-commit $modifier -m"Committed on $( date +"%a, %d %b %Y %H:%M:%S %z" )" -- $@
+    git commit $modifier -m"Committed on $( date +"%a, %d %b %Y %H:%M:%S %z" )" -- $@
     echo "Optimizing and compacting repository (might take a while)." >&2
-    git-gc --auto || git-gc # the --auto is on newer versions
+    git gc --auto || git gc # the --auto is on newer versions
 }
 
 
@@ -244,13 +244,13 @@ function rm_older_than() {
     __abort_on_not_initialized
     local time_spec=$@
 
-    if ! which git-filter-branch &>/dev/null; then
+    if ! which git filter-branch &>/dev/null; then
 	echo "Please install a recent version of Git" >&2
 	echo "See http://git.or.cz for more information about Git" >&2
 	exit 1
     fi
 
-    if test $(git-rev-parse "HEAD@{$time_spec}") = "$(git-rev-parse HEAD)"; then
+    if test $(git rev-parse "HEAD@{$time_spec}") = "$(git rev-parse HEAD)"; then
 	local TMOUT=20
 	echo "You are about to remove *all* commits made before the very last one you made"
 	echo "Press enter or wait 20 seconds to confirm.  Abort with CRTL-C."
@@ -258,15 +258,15 @@ function rm_older_than() {
     fi
 
     # Something like that
-    git-filter-branch --parent-filter \
-	'test $(git-rev-parse "HEAD@{$time_spec}") = "$GIT_COMMIT" || cat ' \
+    git filter-branch --parent-filter \
+	'test $(git rev-parse "HEAD@{$time_spec}") = "$GIT_COMMIT" || cat ' \
 	HEAD
     if test "$?" != "0"; then
 	die "Please make sure you did '$SCRIPT_NAME commit' before removing old files."
     fi
 
     # See git mailing list
-    # "Trying to use git-filter-branch to compress history by removing
+    # "Trying to use git filter-branch to compress history by removing
     # large, obsolete binary files"
 
     git reset --soft # was '--hard' on the post...
@@ -274,7 +274,7 @@ function rm_older_than() {
     #vi .git/packed-refs # Use vi to remove the line referring to
     # refs/original...  No need since we have linear, no tags, nothing
     # special
-    git-reflog expire --all --expire-unreachable=0
+    git reflog expire --all --expire-unreachable=0
 
     echo "Committing the removal action"
 
@@ -288,7 +288,7 @@ function rm_older_than() {
     git commit -m"$msg" $witness_file
 
     # Finally make sure everything is ok, and remove old stuff
-    git-gc --prune
+    git gc --prune
 }
 
 
@@ -302,7 +302,7 @@ function show() {
     local time_spec=$@
 
     echo "Showing: $HOME/$file_to_restore" >&2
-    GIT_PAGER=cat git-show "HEAD@{'$time_spec'}:$file_to_restore"
+    GIT_PAGER=cat git show "HEAD@{'$time_spec'}:$file_to_restore"
 }
 
 function archive_to() {
@@ -353,18 +353,18 @@ function ls_stored_files() {
 	shift # as
 	shift # of
 	local time_spec="$@"
-	git-ls-tree -r --name-only "HEAD@{$time_spec}"
+	git ls-tree -r --name-only "HEAD@{$time_spec}"
     else
-	git-ls-tree -r --name-only HEAD
+	git ls-tree -r --name-only HEAD
     fi
 }
 
 function eat() {
     __abort_on_not_initialized
 
-    git-add -v -- $@ || die "Could not add '$@' to the history store"
+    git add -v -- $@ || die "Could not add '$@' to the history store"
     commit $@
-    git-rm -r -f -- $@ || die "Problem removing '$@'"
+    git rm -r -f -- $@ || die "Problem removing '$@'"
     rm -rf -- $@ # some empty dirs may remain. clean'em up
     commit $@
 }
@@ -434,21 +434,21 @@ case "$1" in
 	;;
     ls-changed-files)
         echo "These files have been modified:" >&2
-        git-ls-files --exclude-standard --modified
+        git ls-files --exclude-standard --modified
 	echo "Use '$SCRIPT_NAME commit' to store them" >&2
         ;;
     ls-new-files)
 	echo "These files are not yet stored:" >&2
-	git-ls-files --exclude-standard --others
+	git ls-files --exclude-standard --others
 	echo "Use '$SCRIPT_NAME commit' to store them" >&2
 	;;
     ls-ignored-files)
 	echo "These files are ignored:" >&2
-	git-ls-files --exclude-standard --ignored --others --directory
+	git ls-files --exclude-standard --ignored --others --directory
 	;;
     ls-newly-ignored-files)
         echo "These files have been ignored since the last commit:" >&2
-	if git-ls-files --modified --others --exclude-standard | egrep -q '(^|/).gitignore$'; then
+	if git ls-files --modified --others --exclude-standard | egrep -q '(^|/).gitignore$'; then
 	    ometastore -d -i | sort
 	fi
 	;;
